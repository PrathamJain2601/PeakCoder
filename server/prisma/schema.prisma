generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  username       String   @unique
  password       String
  name           String
  isVerified     Boolean  @default(false)
  avatar         String? 
  role           Role     @default(USER)
  company        String? 
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  submissions    Submission[]
  sessions       Session[]
  otps           Otp[]

  @@index([createdAt]) // Index for faster user sorting
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // Speeds up user session lookups
}

model Otp {
  id        String   @id @default(uuid())
  email     String   @unique
  code      String  
  createdAt DateTime @default(now())
  expiresAt DateTime 
  
  user      User     @relation(fields: [email], references: [email], onDelete: Cascade)

  @@index([createdAt]) // Index for expiring OTPs efficiently
}

model Problem {
  id           String   @id @default(uuid())
  title        String
  statement    String
  difficulty   String
  tags         String[] 
  timeLimit    Float
  memoryLimit  Int
  createdAt    DateTime @default(now())

  testcase    TestCase[]
  submissions Submission[]

  // Indexing
  @@index([difficulty]) // Index for filtering by difficulty
  @@index([createdAt]) // Index for sorting problems
}

model TestCase {
  id             String  @id @default(uuid())
  problemId      String
  inputFileUrl   String  // S3 URL for input file
  outputFileUrl  String  // S3 URL for expected output file
  isSample       Boolean

  problem        Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@index([problemId]) // Fast lookup by problem
}

model Submission {
  id               String  @id @default(uuid())
  userId           String  
  problemId        String
  languageId       Int
  sourceCodeFileUrl String  // S3 URL for source code
  status           String
  executionTime    Float?
  memoryUsed       Int?
  stdoutFileUrl    String?  // Optional S3 URL for program output
  stderrFileUrl    String?  // Optional S3 URL for error output
  createdAt        DateTime @default(now())

  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem         Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@index([userId]) // Faster submissions lookup for a user
  @@index([problemId]) // Faster submissions lookup by problem
  @@index([createdAt]) // Faster pagination & sorting
}

enum Role {
  USER
  ADMIN
}
