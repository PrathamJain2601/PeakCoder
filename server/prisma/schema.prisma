generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  username       String   @unique
  password       String
  name           String
  isVerified     Boolean  @default(false)
  avatar         String?
  role           Role     @default(USER)
  company        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  submissions    Submission[]
  sessions       Session[]
  otps           Otp[]

  @@index([createdAt])
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Otp {
  id        String   @id @default(uuid())
  email     String   @unique
  code      String
  createdAt DateTime @default(now())
  expiresAt DateTime

  user      User     @relation(fields: [email], references: [email], onDelete: Cascade)

  @@index([createdAt])
}

model Problem {
  id           String   @id @default(uuid())
  title        String
  titleSlug    String   @unique
  statement    String
  constraints  String?   // Markdown or text
  hints        String[] // Array of hints
  difficulty   Difficulty
  timeLimit    Float
  memoryLimit  Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tags         Tag[]    @relation("ProblemTags") 
  testcase     TestCase[]
  submissions  Submission[]

  @@index([difficulty])
  @@index([createdAt])
}

model Tag {
  id       String     @id @default(uuid())
  name     String     @unique
  problems Problem[]  @relation("ProblemTags")
}


model TestCase {
  id             String  @id @default(uuid())
  problemId      String
  inputFileUrl   String
  outputFileUrl  String
  explanation    String?
  isSample       Boolean

  problem        Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@index([problemId])
}

model Submission {
  id                String   @id @default(uuid())
  userId            String
  problemId         String
  languageId        Int
  sourceCodeFileUrl String
  status            Verdict
  executionTime     Float?
  memoryUsed        Int?
  stdoutFileUrl     String?
  stderrFileUrl     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  language          Language @relation(fields: [languageId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem           Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([problemId])
  @@index([createdAt])
}

model Language {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  extension String  @unique
  judge0Id  Int

  submissions Submission[]
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Role {
  USER
  ADMIN
}

enum Verdict {
  PENDING
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
}
